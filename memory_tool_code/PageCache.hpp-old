#ifndef FAST_PAGE_CACHE
#define FAST_PAGE_CACHE

#include <map>
#include <fstream>
#include "CacheStats.hpp"
#include "common.hpp"


#define MAX_CORES 16
//#define TAG_CACHE
#define LRU_BASELINE
//#define VAULTS 16
//#define VAULTS 64

typedef unsigned char state_t;

unsigned long allOnes(unsigned int region_size){
    switch(region_size){
        case 128:  return 0x3; //2^2 -1;
        case 256:  return 0xF; //2^4 -1;
        case 512:  return 0xFF; //2^8 -1;
        case 1024: return 0xFFFF; //2^16 -1;
        case 2048: return 0xFFFFFFFF; //2^32 -1;
        case 4096: return 0xFFFFFFFFFFFFFFFF; //2^64 -1;
        default :
            assert(false);
            return 0;
    }
}

//for pages
const state_t kInvalid = 0x0;
const state_t kValid = 0x1;
//FIXME add dirty??

//for blocks
const state_t kTouched = 0x1;
const state_t kDirty = 0x2;
const state_t kInvalidated = 0x4;
const state_t kDowngraded = 0x8;
const state_t kTouchedRead = 0x10;

//operations
const int kRead = 0;
const int kWrite=1;




struct TAGEntry{
    unsigned long address;   // full triggering address
    unsigned long tag;       // 
    unsigned int  lru_time;
    state_t pageState;
};

#ifdef TAG_CACHE
class TagCache{
//FIXME this is for 1KB pages, 4-way associative cache
  static const unsigned SIZE=8192;	
  static const unsigned associativity=4;

  unsigned region_size;
  unsigned numOfTagSets;
  unsigned numOfCacheSets;
  unsigned long cachedSets[SIZE];
  bool 		     valid[SIZE];
  unsigned 	  lru_info[SIZE];
public:
  TagCache(unsigned cacheSize, unsigned cacheAssociativity, unsigned regionSize1){
    region_size=regionSize1;
    numOfTagSets=SIZE/associativity;
 
    unsigned  blocksPerPage=region_size/BLOCK_SIZE;
    numOfCacheSets=(((cacheSize/blocksPerPage)*(blocksPerPage-1)*1024/region_size)*1024)/cacheAssociativity;
  
    memset(cachedSets, 0, SIZE*sizeof(unsigned long));
    memset(valid, false, SIZE*sizeof(bool));
    for(unsigned i=0; i<numOfTagSets; i++)
      for(unsigned j=0; j<associativity; j++)
	 lru_info[i*associativity+j]=j;
   
  }

  bool lookup(unsigned long address){
    unsigned long cacheSet = (address/region_size)%numOfCacheSets;  
    unsigned tagCache_index = cacheSet%numOfTagSets;
    unsigned way=0;
    bool found=false;

    for(unsigned i=0; i<associativity; i++) 
      if ((cachedSets[tagCache_index*associativity+i]==cacheSet) && valid[tagCache_index*associativity+i]){
 	      way=i;
 	      found=true;
      }	

    if(!found) {//miss - find a victim and update LRU
  	  for(unsigned i=0; i<associativity; i++) 
        if(lru_info[tagCache_index*associativity+i]==(associativity-1)) 
          way=i;
          
      cachedSets[tagCache_index*associativity+way]=cacheSet;
      valid[tagCache_index*associativity+way]=true;
    }

    unsigned old_time=lru_info[tagCache_index*associativity+way];

    for(unsigned i=0; i<associativity; i++) 
      if(lru_info[tagCache_index*associativity+i]<old_time) 
        lru_info[tagCache_index*associativity+i]++;

    lru_info[tagCache_index*associativity+way]=0;

    return found;
  }
};

#endif

//helper functions


//returns last $bits bits of $number in the reverse order
unsigned long reverse(unsigned long number, int bits){
	unsigned long result = 0;
	for(int i=0; i<bits; i++) {
		result = result <<1;
		if(number % 2 == 1) result++;
		number = number >>1;
	}
	return result;
}



unsigned countOnes(unsigned long number) {
	unsigned int result = 0;
	while (number>0) {
		if(number%2 ==1) result++;
		number = number>>1;
	}
	return result;
}


class WayPredictor{
public:
 unsigned int SIZE; //PICOREL: 16 vaults, in entries, log2(ways) size of entry
 unsigned int VAULTS;

 virtual unsigned hash(unsigned long key){
    key=key/VAULTS;
    unsigned int c, hashed=0;
    //DJ: 4KB page -> 12 bits, 64 vaults --> 6 vault bits, 4-way associative -> 2 bits , 32GB system ->35 bits --> total 15 bits left
    int foldCount=0;
    switch(SIZE){
     case 256:
        foldCount=2; //2x8bit
        break;
     case 128:
        foldCount=2; //2x7bit
        break;
     case 64:
        foldCount=3; //3x6bit
        break;
     case 32:
        foldCount=3; //3x5bit
        break;
     case 16:
        foldCount=4; //4x4bit
        break;
     case 8:
        foldCount=5; //5x3bit
        break;
     case 4:
        foldCount=8; //7x2bit
        break;
     case 2:
        foldCount=15; //15x1bit
        break;
     case 1:
        return 0;
        break;
      default: 
        exit(-1);
    }
    for(int i=0; i<foldCount; i++){
        c= key % SIZE;
        key/= SIZE;
        hashed^= c;
     }
   return hashed;
  }

 WayPredictor(unsigned int aNumVault, unsigned int aNumWP){
    SIZE = aNumWP;
    VAULTS = aNumVault;
    table = (unsigned int *) malloc(sizeof(unsigned int) * SIZE);
    memset(table, 0, sizeof(unsigned int) * SIZE);
 }

  unsigned get(unsigned long key){
    return table[hash(key)];
  }

  void update(unsigned long key, unsigned way){
    unsigned int index=hash(key);
    table[index]=way;
  }

  void writeWayPredictor(gzFile& output){
    gzwrite(output, &(table[0]), SIZE*sizeof(unsigned int));
  }

  void readWayPredictor(gzFile& input){
    gzread(input, &(table[0]), SIZE*sizeof(unsigned int));
  }

  virtual ~WayPredictor(){};

protected:
 //unsigned int table[SIZE];
 unsigned int *table;
};


class PageCache{
	CacheStats* theStats;

	unsigned int region_size; //in bytes
	unsigned int onChipMemorySize; //in MB
	unsigned int associativity;

  unsigned int numVault;
  unsigned int numWP;

	unsigned long numOfOnChipPages; //number of page frames on the chip
	unsigned long numOfSets;
	unsigned int blocksPerPage;

	TAGEntry *cachedTable; 
  unsigned int workload;

#ifdef TAG_CACHE
  TagCache *tagCache;
#endif
  //WayPredictor *wayPredictor[VAULTS];
  WayPredictor *wayPredictor[];

  unsigned int hash(unsigned long address1){ //returns 0..numOfOnChipPages
#ifdef HASH_TAG
    unsigned long c1, c2, b1, b2, b3;
    unsigned long tag= (address1/region_size);

    b1=tag%(256);
    b2=(tag/256)%(256);
    b3=(tag >> 21)%256;
    tag=tag-b1-256*b2+b2+256*b1;
    tag = tag^b3; 
    c1=tag%(numOfSets);
    c2=(tag/8)%(numOfSets);
    return c1^c2;
#else    
    return (address1/region_size)%numOfSets;
#endif
  } 

  unsigned long computeTag(unsigned long address){
#ifdef HASH_TAG
    return address/region_size;
#else
    return address/region_size;
#endif
  }

  public:

	PageCache(unsigned int region_size1,  unsigned onChipMemorySize1, unsigned associativity1, CacheStats* stats1,  unsigned wkld1, unsigned int aNumVault, unsigned int aNumWP) {
		initialize(region_size1,  onChipMemorySize1, associativity1, wkld1, aNumVault, aNumWP);
		theStats=stats1; 
#ifdef TAG_CACHE
    tagCache=new TagCache(onChipMemorySize1, associativity1, region_size1);
#endif
	}
 
#ifdef TAG_CACHE
  	bool tagCacheLookup(unsigned long address){
      return tagCache->lookup(address);
    } 
#endif  

	void setStats(CacheStats* stats){
		theStats=stats;
	}

	void initialize(unsigned int region_size1,  unsigned int onChipMemorySize1, unsigned int associativity1, unsigned wkld, unsigned int aNumVault, unsigned int aNumWP){
		//for(int i=0; i<VAULTS; i++) wayPredictor[i]=new WayPredictor;        	

		for(unsigned int i=0; i< aNumWP; i++) 
      wayPredictor[i]=new WayPredictor(aNumVault, aNumWP);

		workload=wkld;
		region_size = region_size1;
		onChipMemorySize = onChipMemorySize1;
		associativity = associativity1;
    blocksPerPage =region_size/BLOCK_SIZE;
    numVault = aNumVault;
    numWP = aNumWP;

    numOfOnChipPages=(onChipMemorySize*1024/region_size)*1024; //MB

    if(associativity == 0) associativity = numOfOnChipPages; //Fully associative
      numOfSets = numOfOnChipPages / associativity;

		cachedTable=new TAGEntry[numOfOnChipPages]; 

		for(unsigned k=0; k<numOfSets; k++) 
		  for(unsigned l=0; l<associativity; l++) {
  			unsigned i=k*associativity+l;	

			  cachedTable[i].tag= 0L;
			  cachedTable[i].address=0L;
			  cachedTable[i].pageState=kInvalid;
 			  cachedTable[i].lru_time =l;
		}
  
    std::cout<<"=======================================================" << std::endl;
	  printf("region_size %uB\n",region_size);
	  printf("onChipMemorySize %uMB\n",onChipMemorySize);
	  printf("numOfOnChipPages %lu\n",numOfOnChipPages);
	  printf("numOfSets %lu\n",numOfSets);
	  printf("associativity %u\n",associativity);
	  printf("numVaults %u\n", numVault);
	  printf("perWPNumEntries %u\n", numWP);
    std::cout<<"=======================================================" << std::endl;
	}

  void fixPredictor(unsigned long key, unsigned int way){ 
	    unsigned myVault=hash(key) % numVault;
      wayPredictor[myVault]->update(key/region_size, way);
	}

  unsigned int predictWay(unsigned long key){
    unsigned myVault=hash(key) % numVault;
	  return wayPredictor[myVault]->get(key/region_size);
  }
       
	void clearPage(unsigned long address, unsigned int way){
		unsigned long page = address / region_size;
		unsigned long index=hash(address);
		unsigned int ind=index*associativity+way;
		cachedTable[ind].tag=0L;
		cachedTable[ind].address=0L;
		cachedTable[ind].pageState=kInvalid;
	}

  void touchAnAddress(unsigned long address, unsigned int way, int op){
	  unsigned long tag = computeTag(address);
	  unsigned long index = hash(address);
	  unsigned long ind =index*associativity+way; 
	  DBG_Assert(cachedTable[ind].pageState==kValid,(<<"Accessing an invalid page"));
	  DBG_Assert(cachedTable[ind].tag==tag,(<<"Tag mismatch!"));
  }

  void insert(unsigned long address, state_t state, unsigned int way,  unsigned int operation){
	  fixPredictor(address, way);
	  unsigned long tag = computeTag(address);
	  unsigned long index = hash(address);
	  (theStats->thePageInserts_stat)++;
	  unsigned long ind= index*associativity+way;
	  cachedTable[ind].tag = tag;
	  cachedTable[ind].pageState = state;

    //LRU update
    unsigned old_time=cachedTable[ind].lru_time;
    cachedTable[ind].lru_time = 0;
    for (unsigned i=0; i<associativity; i++)
		  if((i!=way) && (cachedTable[index*associativity+i].lru_time<old_time)) 
        cachedTable[index*associativity+i].lru_time++;

	    cachedTable[ind].address=address;

  }


	const state_t& lookup(unsigned long address, unsigned int &way){
		way = 0;
		unsigned long tag = computeTag(address);
		unsigned long index = hash(address);
		for (unsigned int i=0; i < associativity; i++)
	  	  if((cachedTable[index*associativity+i].pageState!=kInvalid) && cachedTable[index*associativity+i].tag == tag){
			way = i;
			return cachedTable[index*associativity+i].pageState;
	 	   }
		return kInvalid;
	}

	state_t findVictim(unsigned long address, unsigned int &way,unsigned long &toWriteBack){
		unsigned long index = hash(address);
		int toReplace = -1;

 		bool foundInvalid=false; 

	 	for (unsigned int i=0; i <associativity; i++)
	    if(cachedTable[index*associativity+i].pageState==kInvalid) toReplace = i;
                
    foundInvalid=true; //there might be an invalid one

	  if(toReplace<0) {
		  foundInvalid=false;
		  toReplace=0;

		  for(unsigned int i=1; i<associativity; i++)
		    if(cachedTable[index*associativity+i].lru_time>cachedTable[index*associativity+toReplace].lru_time) toReplace=i;
		}
                
		way = toReplace;
		unsigned long ind=index*associativity+way;
	  toWriteBack = cachedTable[ind].address;

		if(cachedTable[ind].pageState==kInvalid) 
      return kInvalid;

    state_t returnState = cachedTable[ind].pageState; 
    clearPage(address, way);

    return returnState;
  }



  void applyPolicy(unsigned long address, unsigned int way){
    unsigned long page = address / region_size;
    unsigned long index = hash(address);
	  unsigned int old_time = cachedTable[index*associativity+way].lru_time;
	  unsigned long ind=index*associativity+way;

#ifdef LRU_BASELINE
               for(unsigned int i=0; i<associativity; i++)
    	     	    if(cachedTable[index*associativity+i].lru_time<old_time) cachedTable[index*associativity+i].lru_time++;
	       cachedTable[index*associativity+way].lru_time=0;
#endif

    }

    virtual ~PageCache(){

	    delete [] cachedTable;
      //delete [] wayPredictor;
		  for(unsigned int i= 1; i< numVault; i++) delete wayPredictor[i];        	
    }


    
}; //class



#endif //FAST_PAGE_CACHE

