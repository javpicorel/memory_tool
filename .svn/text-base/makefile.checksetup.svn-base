# DO-NOT-REMOVE begin-copyright-block 
#                                     
# Redistributions of any form whatsoever must retain and/or include the     
# following acknowledgment, notices and disclaimer:                         
#                                                                           
# This product includes software developed by Carnegie Mellon University.   
#                                                                           
# Copyright 2006 - 2008 by Eric Chung, Michael Ferdman, Brian Gold, Nikos   
# Hardavellas, Jangwoo Kim, Ippokratis Pandis, Minglong Shao, Jared Smolens,
# Stephen Somogyi, Evangelos Vlachos, Tom Wenisch, Anastassia Ailamaki,     
# Babak Falsafi and James C. Hoe for the SimFlex Project, Computer          
# Architecture Lab at Carnegie Mellon, Carnegie Mellon University.          
#                                                                           
# For more information, see the SimFlex project website at:                 
#   http://www.ece.cmu.edu/~simflex                                         
#                                                                           
# You may not use the name 'Carnegie Mellon University' or derivations      
# thereof to endorse or promote products derived from this software.        
#                                                                           
# If you modify the software you must place a notice on or within any       
# modified version provided or made available to any third party stating    
# that you have modified the software.  The notice shall include at least   
# your name, address, phone number, email address and the date and purpose  
# of the modification.                                                      
#                                                                           
# THE SOFTWARE IS PROVIDED 'AS-IS' WITHOUT ANY WARRANTY OF ANY KIND, EITHER 
# EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY  
# THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY 
# IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,  
# TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY 
# BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT, 
# SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN   
# ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY, 
# CONTRACT, TORT OR OTHERWISE).                                             
#                                     
# DO-NOT-REMOVE end-copyright-block   
include makefile.defs
include makefile.which_os

.PHONY: check_setup gcc_version boost_version simics_version simics_gcc_libs

check_setup: gcc_version boost_version simics_version simics_gcc_libs


# This target ensures that the path to GCC is set, and that we are actually
# running with the correct GCC. You can override the version check by setting
# GCC_VERSION_NOCHECK=true in makefile.defs
REQUIRED_GCC_VERSION_1=4.1.0
REQUIRED_GCC_VERSION_2=4.0.0
REQUIRED_GCC_VERSION_3=4.1.2
ifndef GCC
gcc_version:
	echo "You must set GCC_PATH in makefile.defs to point to g++ $(REQUIRED_GCC_VERSION) installation path."
	echo "You must set GCC_BINARY in makefile.defs to the name of the GNU g++ $(REQUIRED_GCC_VERSION) binary"
	echo "which should be located in GCC_PATH/bin"
	echo "See Flexus quick start guide for instructions on configuring Flexus."
	false

else
ifndef GCC_VERSION_NOCHECK
gcc_version:
	if [[ -x $(GCC) ]] ; then \
	  GCC_VER=`$(GCC) -dumpversion` ; \
	  if [[ $$GCC_VER == "$(REQUIRED_GCC_VERSION_1)" || $$GCC_VER == "$(REQUIRED_GCC_VERSION_2)" || $$GCC_VER == "$(REQUIRED_GCC_VERSION_3)" ]] ; then \
	    true ; \
	  else \
	    echo "$(GCC) reports its version as $$GCC_VER." ; \
	    echo "Flexus only supports g++ $(REQUIRED_GCC_VERSION_1) or $(REQUIRED_GCC_VERSION_2) or $(REQUIRED_GCC_VERSION_3)." ; \
	    echo "You can override this check and force make to continue by adding" ; \
	    echo "GCC_VERSION_NOCHECK=true to makefile.defs" ; \
	    false ; \
	  fi \
	else \
	  echo "$(GCC) is not a valid executable." ; \
	  echo "You must set GCC_PATH in makefile.defs to point to g++ $(REQUIRED_GCC_VERSION_1) installation path." ; \
	  echo "You must set GCC_BINARY in makefile.defs to the name of the GNU g++ $(REQUIRED_GCC_VERSION_1) binary" ; \
	  echo "which should be located in GCC_PATH/bin" ; \
	  echo "See Flexus quick start guide for instructions on configuring Flexus." ; \
	  false ; \
	fi
else
gcc_version:
	if [[ -x $(GCC) ]] ; then \
	  true ; \
	else \
	  echo "$(GCC) is not a valid executable." ; \
	  echo "You must set GCC_PATH in makefile.defs to point to g++ $(REQUIRED_GCC_VERSION_1) installation path." ; \
	  echo "You must set GCC_BINARY in makefile.defs to the name of the GNU g++ $(REQUIRED_GCC_VERSION_1) binary" ; \
	  echo "which should be located in GCC_PATH/bin" ; \
	  echo "See Flexus quick start guide for instructions on configuring Flexus." ; \
	  false ; \
	fi
endif
endif


# This target ensures that the path to Boost is set, and that we are actually
# running with Boost 1.33.1.  You can override the version check by setting
# BOOST_VERSION_NOCHECK=true in makefile.defs
REQUIRED_BOOST_VERSION=103301
ifndef BOOST_PATH
boost_version:
	echo "You must set BOOST_PATH in makefile.defs to point to the root directory of Boost 1.33.1." ; \
	echo "See Flexus quick start guide for instructions on configuring Flexus." ; \
	false

else
ifndef BOOST_VERSION_NOCHECK
boost_version:
	if [[ -d $(BOOST_INCLUDE)/boost ]] ; then \
	  BOOST_VER=`grep "#define BOOST_VERSION " $(BOOST_INCLUDE)/boost/version.hpp | awk '{ print $$3 }'`; \
	  if [[ $$BOOST_VER == "$(REQUIRED_BOOST_VERSION)" ]] ; then \
	    true ; \
	  else \
	    echo "$(BOOST_INCLUDE) reports its version as $$BOOST_VER." ; \
	    echo "Flexus only supports $(REQUIRED_BOOST_VERSION) (Boost 1.33.1)." ; \
	    echo "You can override this check and force make to continue by adding" ; \
	    echo "GCC_VERSION_NOCHECK=true to makefile.defs" ; \
	    false ; \
	  fi \
	else \
	  echo "$(BOOST_INCLUDE) does not appear to point to Boost 1.33.1." ; \
	  echo "You must set GCC in makefile.defs to point to the GNU g++ binary." ; \
	  echo "See Flexus quick start guide for instructions on configuring Flexus." ; \
	  false ; \
	fi
else
boost_version:
	if [[ -d $(BOOST_INCLUDE)/boost ]] ; then \
	  true ; \
	else \
	  echo "$(BOOST_INCLUDE) does not appear to point to Boost 1.33.1." ; \
	  echo "You must set BOOST_INCLUDE in makefile.defs to the Boost 1.33.1 root directory" ; \
	  echo "(which has subdirectories boost, libs, etc.)." ; \
	  echo "See Flexus quick start guide for instructions on configuring Flexus." ; \
	  false ; \
	fi
endif
endif


# This target ensures that the path to Simcis is set, and that we are actually
# running with Simics 2.0.28 or Simics 2.2.19.  You can override the version
# check by setting SIMICS_VERSION_NOCHECK=true in makefile.defs
# Simics 2.0.28
REQUIRED_SIMICS_2_0_VERSION=1051
# Simics 2.2.12
REQUIRED_SIMICS_2_2_VERSION=1201
REQUIRED_SIMICS_3_0_VERSION=1302

ifndef SIMICS_PATH
simics_version:
	echo "You must set SIMICS_PATH in makefile.defs to point to the root directory of Simics 2.0.28 or Simics 2.2.12." ; \
	echo "See Flexus quick start guide for instructions on configuring Flexus." ; \
	false

else
ifndef SIMICS_VERSION_NOCHECK
simics_version:
	if [[ -d $(SIMICS_PATH) && -d $(SIMICS_LIB_DIR) && -d $(SIMICS_INCLUDE)/simics ]] ; then \
	  SIMICS_VER=`grep "#define SIM_VERSION " $(SIMICS_INCLUDE)/simics/global.h | awk '{ print $$3 }'`; \
	  SIMICS_VER_COMPAT=`grep "#define SIM_VERSION_COMPAT " $(SIMICS_INCLUDE)/simics/global.h | awk '{ print $$3 }'`; \
	  if [[ $$SIMICS_VER == "$(REQUIRED_SIMICS_2_0_VERSION)" || $$SIMICS_VER == "$(REQUIRED_SIMICS_2_2_VERSION)" || $$SIMICS_VER_COMPAT == "$(REQUIRED_SIMICS_3_0_VERSION)" ]] ; then \
	    true ; \
	  else \
	    echo "$(SIMICS_PATH) reports its version as $$SIMCIS_VER." ; \
	    echo "Flexus supports $(REQUIRED_SIMICS_2_0_VERSION) or $(REQUIRED_SIMICS_2_2_VERSION)." ; \
	    echo "You can override this check and force make to continue by adding" ; \
	    echo "SIMICS_VERSION_NOCHECK=true to makefile.defs" ; \
	    false ; \
	  fi \
	else \
	  echo "$(SIMICS_PATH) does not appear to point to a Simics installation." ; \
	  echo "You must set SIMICS_PATH in makefile.defs to point to the root directory of Simics 2.0.28 or Simics 2.2.12." ; \
	  echo "See Flexus quick start guide for instructions on configuring Flexus." ; \
	  false ; \
	fi
else
simics_version:
	if [[ -d $(SIMICS_PATH) && -d $(SIMICS_LIB_DIR) && -d $(SIMICS_INCLUDE)/simics ]] ; then \
	  true ; \
	else \
	  echo "$(SIMICS_PATH) does not appear to point to a Simics installation." ; \
	  echo "You must set SIMICS_PATH in makefile.defs to point to the root directory of Simics 2.0.28 or Simics 2.2.12." ; \
	  echo "See Flexus quick start guide for instructions on configuring Flexus." ; \
	  false ; \
	fi
endif
endif



# This target ensures that the gcc GLIBC libraries have been copied into
# the Simics x86-linux/sys/lib directory.
# You can disable this check by setting SIMICS_GLIBC_NOCHECK=true in makefile.defs
ifndef SIMICS_GLIBC_NOCHECK
simics_gcc_libs:
	OK=1 ; \
	for LIB in libstdc++.so.6 ; do \
	  diff $(SIMICS_SYSLIB_DIR)/$$LIB $(GCC_LIB_PATH)/$$LIB >& /dev/null ; \
	  if [[ $$? -ne 0 ]] ; then \
	    OK=0 ; \
	  fi ; \
	done ; \
	if [[ $$OK -eq 1 ]] ; then true ; else \
	  echo "The GCC GLIBC libraries do not appear to be installed in $(SIMICS_SYSLIB_DIR)." ; \
	  echo "You will probably get dynamic link errors when you load Flexus into Simics." ; \
	  echo "\"make install\" can fix this for you." ; \
	  echo "You can disable this check by adding SIMICS_GLIBC_NOCHECK=true to makefile.defs." ; \
	  echo "See Flexus quick start guide for instructions on configuring Flexus." ; \
	  false ; \
	fi ;

else
simics_gcc_libs:
	true
endif
